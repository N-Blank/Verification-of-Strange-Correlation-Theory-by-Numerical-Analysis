import numpy as np

# T = np.array([[1, 1, 1, 1], [1, 1, 1, 1], [1, -1, 1, -1], [-1, 1, -1, 1]])

# eva, evt = np.linalg.eig(T)

# print("Matrix T:\n{}".format(T))
# print("---------------------------------------")
# print("Eigenvalues of matrix T:\n{}".format(eva))
# print("Eigenvectors of matrix T:\n{}".format(evt))
# O = np.array([[2, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 0], [0, 0, 0, -2]])
# S1 = np.array([[0.5, 0.5, 0.26697694, -0.59000461],
#                    [0.5, -0.5, 0.26697694, 0.38973653],
#                    [0.5, -0.5, -0.65476966, 0.59000461],
#                    [-0.5, 0.5, 0.65476966, -0.38973653]])
# S = S1.T
# S_inv = np.linalg.inv(S)
# O = np.matmul(np.matmul(S_inv, O), S)
# print("Matrix S:\n{}".format(S))
# print("Matrix S_inv:\n{}".format(S_inv))
# print("Matrix O':\n{}".format(O))

# T = np.array([[1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, -1, 1, -1, 1, -1, 1, -1], [-1, 1, -1, 1, -1, 1, -1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, -1, 1, -1, 1, -1, 1, -1], [-1, 1, -1, 1, -1, 1, -1, 1]])

# eva, evt = np.linalg.eig(T)

# print("Matrix T:\n{}".format(T))
# print("---------------------------------------")
# print("Eigenvalues of matrix T:\n{}".format(eva))
# print("Eigenvectors of matrix T:\n{}".format(evt))

# O = np.array([[3, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, -2, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, 0, 0, -3]])
# S1 = np.array([[-0.64516144, 0.37600001, -0.35355339, -0.24576771, 0.17228814, 0.39708932, 0.42887511, -0.60469694],
#  [-0.31242009, -0.71169437, -0.35355339, -0.24576771, 0.19391569, 0.59179288, 0.15101858, -0.33837828],
#  [0.08318534, -0.2719236, -0.35355339, 0.43542879, -0.50817103, -0.53261537, -0.49834879, 0.3833906],
#  [-0.08318534, 0.2719236, 0.35355339, -0.43542879, 0.42403004, -0.38234123, 0.29629045, -0.2065127],
#  [0.47879077, 0.16784718, -0.35355339, -0.24576771, -0.14103142, -0.0369628, -0.29360487, 0.2509678],
#  [0.47879077, 0.16784718, -0.35355339, -0.24576771, -0.14103142, -0.0369628, -0.48732803, 0.51522952],
#  [0.08318534, -0.2719236, -0.35355339, 0.43542879, 0.47691431, 0.17248885, 0.36307855, -0.02966146],
#  [-0.08318534, 0.2719236, 0.35355339, -0.43542879, -0.47691431, -0.17248885, 0.040019, 0.02966146]])
# S = S1.T
# S_inv = np.linalg.inv(S)
# O = np.multiply(O, S)
# O = np.multiply(S_inv, O)
# print("Matrix S:\n{}".format(S))
# print("Matrix S_inv:\n{}".format(S_inv))
# print("Matrix O`:\n{}".format(O))
# x = 1j ** 0.25
# y = x.conjugate()

# T = np.array([[1, x, x ** 2, x ** 3], [x, 1, x ** 3, x ** 2], [x ** 2, x ** 3, 1, x], [x ** 3, x ** 2, x, 1]])

# eva, evt = np.linalg.eig(T)

# print("Matrix T:\n{}".format(T))
# print("---------------------------------------")
# print("Eigenvalues of matrix T:\n{}".format(eva))
# print("Eigenvectors of matrix T:\n{}".format(evt))
# O = np.array([[2, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 0], [0, 0, 0, -2]])
# S1 = np.array([[0.5 + 0.00000000e+00j, 0.5 - 3.17739123e-16j,
#                0.5 + 0.00000000e+00j, 0.5 - 2.55422187e-16j],
#               [0.5 + 8.62850119e-17j, 0.5 + 0.00000000e+00j,
#                -0.5 + 5.10050833e-16j, -0.5 + 1.18991827e-16j],
#               [0.5 + 1.31365772e-16j, -0.5 + 4.19334208e-17j,
#                -0.5 + 5.23084635e-17j, 0.5 + 0.00000000e+00j],
#               [0.5 + 4.12042521e-17j, -0.5 + 2.42301648e-16j,
#                0.5 - 2.44247090e-16j, -0.5 + 5.16150454e-17j]])
# S = S1.T
# S_inv = np.linalg.inv(S)
# O = np.matmul(np.matmul(S_inv, O), S)
# print("Matrix S:\n{}".format(S))
# print("Matrix S_inv:\n{}".format(S_inv))
# print("Matrix O':\n{}".format(O))
# T = np.array([
#     [complex(1, 0), complex(1, 0), complex(1, 0), complex(1, 0), complex(1, 0), complex(1, 0), complex(1, 0), complex(1, 0), complex(1, 0)],
#     [complex(1, 0), complex(1, 0), complex(1, 0), complex(1, 0), complex(1, 0), complex(1, 0), complex(1, 0), complex(1, 0), complex(1, 0)],
#     [complex(1, 0), complex(1, 0), complex(1, 0), complex(1, 0), complex(1, 0), complex(1, 0), complex(1, 0), complex(1, 0), complex(1, 0)],
#     [complex(1, 0), complex(-0.5, -0.8660254037844386), complex(-0.4999999999999999, 0.8660254037844386), complex(1, 0), complex(-0.5, -0.8660254037844386), complex(-0.4999999999999999, 0.8660254037844386), complex(1, 0), complex(-0.5, -0.8660254037844386), complex(-0.4999999999999999, 0.8660254037844386)],
#     [complex(-0.4999999999999999, 0.8660254037844386), complex(1, 0), complex(-0.5, -0.8660254037844386), complex(-0.4999999999999999, 0.8660254037844386), complex(1, 0), complex(-0.5, -0.8660254037844386), complex(-0.4999999999999999, 0.8660254037844386), complex(1, 0), complex(-0.5, -0.8660254037844386)],
#     [complex(-0.5, -0.8660254037844386), complex(-0.4999999999999999, 0.8660254037844386), complex(1, 0), complex(-0.5, -0.8660254037844386), complex(-0.4999999999999999, 0.8660254037844386), complex(1, 0), complex(-0.5, -0.8660254037844386), complex(-0.4999999999999999, 0.8660254037844386), complex(1, 0)],
#     [complex(1, 0), complex(-0.4999999999999999, 0.8660254037844386), complex(-0.5, -0.8660254037844384), complex(1, 0), complex(-0.4999999999999999, 0.8660254037844386), complex(-0.5, -0.8660254037844384), complex(1, 0), complex(-0.4999999999999999, 0.8660254037844386), complex(-0.5, -0.8660254037844384)],
#     [complex(-0.5, -0.8660254037844384), complex(1, 0), complex(-0.4999999999999999, 0.8660254037844386), complex(-0.5, -0.8660254037844384), complex(1, 0), complex(-0.4999999999999999, 0.8660254037844386), complex(-0.5, -0.8660254037844384), complex(1, 0), complex(-0.4999999999999999, 0.8660254037844386)],
#     [complex(-0.4999999999999999, 0.8660254037844386), complex(-0.5, -0.8660254037844384), complex(1, 0), complex(-0.4999999999999999, 0.8660254037844386), complex(-0.5, -0.8660254037844384), complex(1, 0), complex(-0.4999999999999999, 0.8660254037844386), complex(-0.5, -0.8660254037844384), complex(1, 0)],
# ])

# eva, evt = np.linalg.eig(T)

# print("Matrix T:\n{}".format(T))
# print("---------------------------------------")
# print("Eigenvalues of matrix T:\n{}".format(eva))
# print("Eigenvectors of matrix T:\n{}".format(evt))

T = np.array([(1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j)],
[(1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j)],
[(1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j)],
[(1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j)],
[(1+0j), 1j, (-1+0j), (-0-1j), (1+0j), 1j, (-1+0j), (-0-1j), (1+0j), 1j, (-1+0j), (-0-1j), (1+0j), 1j, (-1+0j), (-0-1j)],
[(-0-1j), (1+0j), 1j, (-1+0j), (-0-1j), (1+0j), 1j, (-1+0j), (-0-1j), (1+0j), 1j, (-1+0j), (-0-1j), (1+0j), 1j, (-1+0j)],
[(-1+0j), (-0-1j), (1+0j), 1j, (-1+0j), (-0-1j), (1+0j), 1j, (-1+0j), (-0-1j), (1+0j), 1j, (-1+0j), (-0-1j), (1+0j), 1j],
[1j, (-1+0j), (-0-1j), (1+0j), 1j, (-1+0j), (-0-1j), (1+0j), 1j, (-1+0j), (-0-1j), (1+0j), 1j, (-1+0j), (-0-1j), (1+0j)],
[(1+0j), (-1+0j), (1+0j), (-1+0j), (1+0j), (-1+0j), (1+0j), (-1+0j), (1+0j), (-1+0j), (1+0j), (-1+0j), (1+0j), (-1+0j), (1+0j), (-1+0j)],
[(-1+0j), (1+0j), (-1+0j), (1+0j), (-1+0j), (1+0j), (-1+0j), (1+0j), (-1+0j), (1+0j), (-1+0j), (1+0j), (-1+0j), (1+0j), (-1+0j), (1+0j)],
[(1+0j), (-1+0j), (1+0j), (-1+0j), (1+0j), (-1+0j), (1+0j), (-1+0j), (1+0j), (-1+0j), (1+0j), (-1+0j), (1+0j), (-1+0j), (1+0j), (-1+0j)],
[(-1+0j), (1+0j), (-1+0j), (1+0j), (-1+0j), (1+0j), (-1+0j), (1+0j), (-1+0j), (1+0j), (-1+0j), (1+0j), (-1+0j), (1+0j), (-1+0j), (1+0j)],
[(1+0j), (-0-1j), (-1+0j), 1j, (1+0j), (-0-1j), (-1+0j), 1j, (1+0j), (-0-1j), (-1+0j), 1j, (1+0j), (-0-1j), (-1+0j), 1j],
[1j, (1+0j), (-0-1j), (-1+0j), 1j, (1+0j), (-0-1j), (-1+0j), 1j, (1+0j), (-0-1j), (-1+0j), 1j, (1+0j), (-0-1j), (-1+0j)],
[(-1+0j), 1j, (1+0j), (-0-1j), (-1+0j), 1j, (1+0j), (-0-1j), (-1+0j), 1j, (1+0j), (-0-1j), (-1+0j), 1j, (1+0j), (-0-1j)],
[(-0-1j), (-1+0j), 1j, (1+0j), (-0-1j), (-1+0j), 1j, (1+0j), (-0-1j), (-1+0j), 1j, (1+0j), (-0-1j), (-1+0j), 1j, (1+0j)])

eva, evt = np.linalg.eig(T)
print("Matrix T:\n{}".format(T))
print("---------------------------------------")
print("Eigenvalues of matrix T:\n{}".format(eva))
print("Eigenvectors of matrix T:\n{}".format(evt))